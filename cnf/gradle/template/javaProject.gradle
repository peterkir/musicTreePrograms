/*
 * WARNING
 *
 * This file should not be edited.
 *
 * GNU LIBRARY GENERAL PUBLIC LICENSE
 * Version 2, June 1991
 *
 * Add tasks that are relevant to Java projects.
 */

assert(project != rootProject               )
assert(rootProject.hasProperty('bnd_cnf'   ))
assert(            hasProperty('sourceSets'))


if (!hasProperty('javaLibsDirName '        )) ext.javaLibsDirName          = '.'                 /* relative to build directory         */
if (!hasProperty('javaTestResultsDirName'  )) ext.javaTestResultsDirName   = 'reports/tests/xml' /* relative to build directory         */
if (!hasProperty('javaTestReportDirName '  )) ext.javaTestReportDirName    = 'tests/html'        /* relative to build reports directory */
if (!hasProperty('javaTestEnableAssertions')) ext.javaTestEnableAssertions = true
if (!hasProperty('javaTestIgnoreFailures'  )) ext.javaTestIgnoreFailures   = false
if (!hasProperty('javaTestMaxParallelForks')) ext.javaTestMaxParallelForks = 1

libsDirName           = javaLibsDirName
testResultsDirName    = javaTestResultsDirName
testReportDirName     = javaTestReportDirName
test.enableAssertions = javaTestEnableAssertions
test.ignoreFailures   = javaTestIgnoreFailures
test.maxParallelForks = javaTestMaxParallelForks

/* Setup javadoc options */
apply from: rootProject.file("${rootProject.bnd_cnf}/gradle/template/javaDoc.gradle")

/* Add findbugs to the project */
apply from: rootProject.file("${rootProject.bnd_cnf}/gradle/template/findbugs.gradle")

/* Add jacoco to the project */
apply from: rootProject.file("${rootProject.bnd_cnf}/gradle/template/jacoco.gradle")

clean.doLast {
  sourceSets.each {
    if (projectDir != it.output.classesDir) {
      delete(it.output.classesDir)
    }
    if (projectDir != it.output.resourcesDir) {
      delete(it.output.resourcesDir)
    }
    if (projectDir != buildDir) {
      delete(buildDir)
    }
  }
}
