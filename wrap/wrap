#!/bin/bash

set -e
set -u


################################################################################
#
#
# Exit Traps and Stack Trace
#
#
################################################################################

declare -i exitPrintStackTracePrint=1
function exitPrintStackTrace() {
  if [[ ${exitPrintStackTracePrint} -eq 0 ]]; then
    return
  fi

  local -i result=0
  local -i pos=0
  echo "================================================================================"
  echo "=                                  Stacktrace                                  ="
  echo "= line / function / file                                                       ="
  echo "================================================================================"
  echo "${LINENO} ${FUNCNAME} ${BASH_SOURCE}"
  while [[ ${result} -eq 0 ]]; do
    set +e
    caller ${pos}
    result=${?}
    set -e
    pos+=1
  done
  echo "================================================================================"
}


function exitTrapHandler() {
  local -i exitCode=${?}

  if [[ -d "${WRAPPEDDIRTMP:-}" ]]; then
    rm -fr "${WRAPPEDDIRTMP}"
  fi

  if [[ ${exitCode} -ne 0 ]]; then
    exitPrintStackTrace
    echo "Exiting with code ${exitCode}"
  fi
  exit ${exitCode}
}

trap exitTrapHandler EXIT


function exitPrintArguments() {
  local -i index=1
  while [[ ${#} -gt 0 ]]; do
    echo "  Argument ${index} : \"${1}\""
    index+=1
    shift 1
  done
}


################################################################################
#
#
# Strings
#
#
################################################################################

#
# Trim a string: remove spaces from the beginning and end of the string
#
# 1=string to trim  return=trimmed string
function stringTrim() {
  if [[ ${#} -ne 1 ]]; then
    echo "Expected 1 argument in ${FUNCNAME}, got ${#}"
    if [[ ${#} -gt 0 ]]; then exitPrintArguments "${@}"; fi
    exit 1
  fi

  if [[ -z "${1}" ]]; then
    return
  fi

  # remove leading whitespace characters
  local var="${1#${1%%[![:space:]]*}}"

  # remove trailing whitespace characters
  echo "${var%${var##*[![:space:]]}}"
}


################################################################################
#
#
# Paths
#
#
################################################################################

#
# Get the canonical path of a file or directory
# This is the physical path without any links
#
# 1=the file or directory
function pathCanonicalPath() {
  if [[ ${#} -ne 1 ]]; then
    echo "Expected 1 argument in ${FUNCNAME}, got ${#}"
    if [[ ${#} -gt 0 ]]; then exitPrintArguments "${@}"; fi
    exit 1
  fi

  local src="$(stringTrim "${1}")"

  if [[ -h "${src}" ]] && [[ -d "${src}" ]]; then
    # src is a link to a directory
    pushd . &> /dev/null
    cd -P "${src}" &> /dev/null
    pwd -P
    popd &> /dev/null
    return
  fi

  # we're not dealing with a directory here
  while [[ -h "${src}" ]]; do
    # keep getting the link target while src is a link
    src="$(ls -la "${src}" | \
           sed -r 's#^.*?[[:space:]]+->[[:space:]]+(.*)$#\1#')"
  done
  # src is no longer a link here

  pushd . &> /dev/null
  cd -P "$(dirname "${src}")" &> /dev/null
  echo "$(pwd -P)/$(basename "${src}")"
  popd &> /dev/null
}


################################################################################
#
#
# Main
#
#
################################################################################


declare script="$(pathCanonicalPath "${0}")"
declare scriptDir="$(dirname "${script}")"

exitPrintStackTracePrint=0
if [[ ${#} -lt 2 ]]; then
  echo "Usage: ${script} VERSION gGITSHA"
  exit 1
fi
exitPrintStackTracePrint=1
unset script

declare BSNIN="jaudiotagger"
declare BSNOUT="org.jaudiotagger"
declare VERSION="$(stringTrim "${1}")"
declare QUALIFIER="$(stringTrim "${2:-}")"
if [ -n "$QUALIFIER" ]; then
  QUALIFIER=".$QUALIFIER"
fi

declare BND="${scriptDir}/biz.aQute.bnd.jar"
declare BND_BND_SRC="${scriptDir}/bnd.bnd.src"
declare BND_BND="${scriptDir}/bnd.bnd"
declare JAR_IN="${scriptDir}/${BSNIN}-${VERSION}${QUALIFIER}"
declare JAR_IN_SRC="${JAR_IN}-sources"
declare JAR_OUT="${scriptDir}/${BSNOUT}-${VERSION}"


exitPrintStackTracePrint=0
if [[ ! -f "${BND}" ]]; then
  echo "BND jar ${BND} does not exist"
  exit 1
fi
if [[ ! -f "${BND_BND_SRC}" ]]; then
  echo "BND file ${BND_BND_SRC} does not exist"
  exit 1
fi

if [[ ! -f "${JAR_IN}.jar" ]]; then
  JAR_IN="${scriptDir}/${BSNIN}-${VERSION}"
  JAR_IN_SRC="${JAR_IN}-sources"
  echo "Input file ${JAR_IN}.jar does not exist, trying ${JAR_IN}.jar"
fi

if [[ ! -f "${JAR_IN}.jar" ]]; then
  echo "Input file ${JAR_IN}.jar does not exist"
  exit 1
fi
if [[ ! -f "${JAR_IN_SRC}.jar" ]]; then
  echo "Input file ${JAR_IN_SRC}.jar does not exist"
  exit 1
fi
exitPrintStackTracePrint=1


rm -f "${BND_BND}" "${JAR_OUT}.jar"

sed -e "s/__version__/${VERSION}${QUALIFIER}/" \
    -e "s/__jar_in__/$(basename "${JAR_IN}").jar/" \
    -e "s/__jar_in_src__/$(basename "${JAR_IN_SRC}").jar/" \
    "${BND_BND_SRC}" > "${BND_BND}"

java -jar "${BND}" "${BND_BND}"

rm -f "${BND_BND}"

echo "Produced jars:"
echo "${JAR_OUT}.jar"

exit 0

